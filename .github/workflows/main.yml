name: Build, Push Image to ECR for assignment 2

on: 
  push:
    branches: [ main ]
  workflow_dispatch:  # Enables manual trigger

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Setup AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and Push MySQL Image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: sql-database-repo
        IMAGE_TAG: ${{ github.run_number }}
      run: |
        docker build -t "${ECR_REGISTRY}/${ECR_REPOSITORY}:v1" -f Dockerfile_mysql .
        docker push "${ECR_REGISTRY}/${ECR_REPOSITORY}:v1"

    - name: Build and Push WebApp Image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: application-repo
        IMAGE_TAG: ${{ github.run_number }}
        ARG IMAGE_VERSION: "version1"
        ENV IMAGE_VERSION: $IMAGE_VERSION
      run: |
        echo "Version 1" > version.txt
        docker build --no-cache -t "${ECR_REGISTRY}/${ECR_REPOSITORY}:v1" --build-arg VERSION=v1 -f Dockerfile .

        echo "Version 2" > version.txt
        docker build --no-cache -t "${ECR_REGISTRY}/${ECR_REPOSITORY}:v2" --build-arg VERSION=v2 -f Dockerfile .


        docker push "${ECR_REGISTRY}/${ECR_REPOSITORY}:v1"
        docker push "${ECR_REGISTRY}/${ECR_REPOSITORY}:v2"
